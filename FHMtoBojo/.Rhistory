duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
}
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
View(SHL)
SHL$payment <- SHL$payment*2
SHL$payment <- SHL$payment * 2
write.csv(SHL,"C:\\Users\\Luke\\Desktop\\SHL\\Twitter5-24.csv", row.names = FALSE)
library (rsconnect)
library(tidyverse)
library(rvest)
library(rtweet)
library(dplyr)
library(purrr)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "qiuhpw6xWBxLvhkbqlofyoN4m"
api_secret_key <- "hOE5NGbaU3uSStw7o08eaPjeaR4iZ4MKzMLiLDrX2SjsswnosK"
access_token <- "3270729511-UngtR9d7pPPNGWq6ZietCiZ1DminaRpxEsHuPIc"
access_token_secret <- "qlUU8WbSswh0IrFYDhO888iJGZGmU291WH6USb5pifDAW"
## authenticate via web browser
token <- create_token(
app = "rstatsjournalismresearch",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
#End date(Sunday date + 1 day)
endDate <- as.POSIXct("2021-05-31 5:00:00")
#Thread link
threadLink <- "https://simulationhockey.com/showthread.php?tid=112765"
threadLinkG <- paste(threadLink,"&page=%f", sep="")
getLast <- threadLink %>%
read_html() %>%
html_node(".pagination_last") %>%
html_text()
Pages <- as.integer(getLast)
#endDate <- as.Date(endDate)
pastDate <- endDate - 622800
getlist <- function(x) {
#x <- 2
website <- sprintf(threadLinkG,x)
url <- read_html(website)
#website
if(x==1){
userName <- url %>%
html_nodes("style~ .classic .profile-username a") %>%
html_text()
} else {
userName <- url %>%
html_nodes(".profile-username a") %>%
html_text()
}
profile <- url %>%
html_nodes(".post_body > .mycode_url") %>%
html_text()
profile <- tolower(c(profile))
#print(profile)
getProfile <- profile %>% as.data.frame() %>%
separate(1, into = c("handle", "extra"), sep = "[?]")
getProfile$handle <- gsub("https://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("http://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://mobile.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/with_replies", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/", replacement = "", x = getProfile$handle)
#print(getProfile)
payment <- vector(mode ="integer", length=1)
payInc <-1
for (value in getProfile$handle){
print(value)
getuser <- rtweet::get_timeline(value, n = 150, check=FALSE, fast=TRUE)
filtered <- getuser %>%
select(created_at, screen_name,hashtags, text ,replyToSN = reply_to_status_id) %>%
filter(created_at >= pastDate & created_at <= endDate & grepl("shlhockey", tolower(hashtags)) == TRUE)
filtered$created_at <- filtered$created_at - 18000
twitter_name <- filtered$screen_name[1]
#print(twitter_name)
if (dim(filtered)[1] == 0) {
payment[payInc] <- 0
payInc <- payInc +1
}else {
filtered$created_at <- as.Date(filtered$created_at, format="%y-%mm-%dd")
filtered["Payout"] <- 0
replyDate <- vector(mode = "character", length =1)
tweetDate <- vector(mode = "character", length =1)
reply <- 1
tweet <- 1
for (i in 1:length(filtered$created_at)){
#Check to see if it is a reply
if(is.na(filtered$replyToSN[i]) == TRUE) {
if (length(tweetDate) == 3) {
#checking if there is already 3 tweets claimed
filtered$Payout[i] <- 0
}else if (tweetDate[1]==""){
#gsub removes emoji characters
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
} else if (is.na(match(filtered$created_at[i], tweetDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
}
#else, checks if it is a reply, if so enter the if statement
} else if (is.na(filtered$replyToSN[i]) == FALSE) {
if (length(replyDate) == 3){
filtered$Payout[i] <- 0
#if there already are 3 replies that gets paid, then give that payout as 0
}else if (replyDate[1]==""){
#gsub removes emoji characters
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
} else if (is.na(match(filtered$created_at[i], replyDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
}
}
}
#gives the summation of the payout
temp <- filtered %>%
dplyr::group_by(screen_name) %>%
dplyr::summarize(Payout = format(sum(Payout), .groups = 'drop', scientific=F))
payment[payInc] <- temp$Payout
payInc <- payInc +1
}
}
data.frame(userName,getProfile$handle, payment)
}
if (Pages == 1){
SHL <- purrr::map_df(1, getlist)
} else {
SHL <- purrr::map_df(1:Pages, getlist)
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
}
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
write.csv(SHL,"C:\\Users\\Luke\\Desktop\\SHL\\Twitter5-31.csv", row.names = FALSE)
library (rsconnect)
library(tidyverse)
library(rvest)
library(rtweet)
library(dplyr)
library(purrr)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "qiuhpw6xWBxLvhkbqlofyoN4m"
api_secret_key <- "hOE5NGbaU3uSStw7o08eaPjeaR4iZ4MKzMLiLDrX2SjsswnosK"
access_token <- "3270729511-UngtR9d7pPPNGWq6ZietCiZ1DminaRpxEsHuPIc"
access_token_secret <- "qlUU8WbSswh0IrFYDhO888iJGZGmU291WH6USb5pifDAW"
## authenticate via web browser
token <- create_token(
app = "rstatsjournalismresearch",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
#End date(Sunday date + 1 day)
endDate <- as.POSIXct("2021-06-07 5:00:00")
#Thread link
threadLink <- "https://simulationhockey.com/showthread.php?tid=112765"
threadLinkG <- paste(threadLink,"&page=%f", sep="")
getLast <- threadLink %>%
read_html() %>%
html_node(".pagination_last") %>%
html_text()
Pages <- as.integer(getLast)
#endDate <- as.Date(endDate)
pastDate <- endDate - 622800
getlist <- function(x) {
#x <- 2
website <- sprintf(threadLinkG,x)
url <- read_html(website)
#website
if(x==1){
userName <- url %>%
html_nodes("style~ .classic .profile-username a") %>%
html_text()
} else {
userName <- url %>%
html_nodes(".profile-username a") %>%
html_text()
}
profile <- url %>%
html_nodes(".post_body > .mycode_url") %>%
html_text()
profile <- tolower(c(profile))
#print(profile)
getProfile <- profile %>% as.data.frame() %>%
separate(1, into = c("handle", "extra"), sep = "[?]")
getProfile$handle <- gsub("https://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("http://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://mobile.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/with_replies", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/", replacement = "", x = getProfile$handle)
#print(getProfile)
payment <- vector(mode ="integer", length=1)
payInc <-1
for (value in getProfile$handle){
print(value)
getuser <- rtweet::get_timeline(value, n = 150, check=FALSE, fast=TRUE)
filtered <- getuser %>%
select(created_at, screen_name,hashtags, text ,replyToSN = reply_to_status_id) %>%
filter(created_at >= pastDate & created_at <= endDate & grepl("shlhockey", tolower(hashtags)) == TRUE)
filtered$created_at <- filtered$created_at - 18000
twitter_name <- filtered$screen_name[1]
#print(twitter_name)
if (dim(filtered)[1] == 0) {
payment[payInc] <- 0
payInc <- payInc +1
}else {
filtered$created_at <- as.Date(filtered$created_at, format="%y-%mm-%dd")
filtered["Payout"] <- 0
replyDate <- vector(mode = "character", length =1)
tweetDate <- vector(mode = "character", length =1)
reply <- 1
tweet <- 1
for (i in 1:length(filtered$created_at)){
#Check to see if it is a reply
if(is.na(filtered$replyToSN[i]) == TRUE) {
if (length(tweetDate) == 3) {
#checking if there is already 3 tweets claimed
filtered$Payout[i] <- 0
}else if (tweetDate[1]==""){
#gsub removes emoji characters
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
} else if (is.na(match(filtered$created_at[i], tweetDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
}
#else, checks if it is a reply, if so enter the if statement
} else if (is.na(filtered$replyToSN[i]) == FALSE) {
if (length(replyDate) == 3){
filtered$Payout[i] <- 0
#if there already are 3 replies that gets paid, then give that payout as 0
}else if (replyDate[1]==""){
#gsub removes emoji characters
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
} else if (is.na(match(filtered$created_at[i], replyDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
}
}
}
#gives the summation of the payout
temp <- filtered %>%
dplyr::group_by(screen_name) %>%
dplyr::summarize(Payout = format(sum(Payout), .groups = 'drop', scientific=F))
payment[payInc] <- temp$Payout
payInc <- payInc +1
}
}
data.frame(userName,getProfile$handle, payment)
}
if (Pages == 1){
SHL <- purrr::map_df(1, getlist)
} else {
SHL <- purrr::map_df(1:Pages, getlist)
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
}
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
write.csv(SHL,"C:\\Users\\Luke\\Desktop\\SHL\\Twitter6-07.csv", row.names = FALSE)
setwd("~/FHMtoBojo/FHMtoCSV/FHMtoBojo")
seasonCurrent <- 59
yearCurrent <- 2025
player_master <- read_delim("player_master.csv",
";", escape_double = FALSE, col_types = cols(Birthcity = col_skip(),
Birthstate = col_skip(), `Date Of Birth` = col_skip(),
`First Name` = col_skip(), FranchiseId = col_skip(),
Height = col_skip(), Nationality_One = col_skip(),
Nationality_Three = col_skip(), Nationality_Two = col_skip(),
`Nick Name` = col_skip(), Retired = col_skip(),
TeamId = col_skip(), Weight = col_skip()),
trim_ws = TRUE)
##Read in the team_Data.csv
team_data <- read_delim("team_data.csv",
";", escape_double = FALSE, col_types = cols(`Conference Id` = col_skip(),
`Parent Team 1` = col_skip(), `Parent Team 2` = col_skip(),
`Parent Team 3` = col_skip(), `Parent Team 4` = col_skip(),
`Parent Team 5` = col_skip(), `Parent Team 6` = col_skip(),
`Parent Team 7` = col_skip(), `Parent Team 8` = col_skip(),
`Primary Color` = col_skip(), `Secondary Color` = col_skip(),
`Text Color` = col_skip(), `LeagueId` = col_skip(), `Name` = col_skip(), `Nickname` = col_skip(), `Division Id` = col_skip()), trim_ws = TRUE)
library(tidyverse)
library(dplyr)
library(readr)
seasonCurrent <- 59
yearCurrent <- 2025
player_master <- read_delim("player_master.csv",
";", escape_double = FALSE, col_types = cols(Birthcity = col_skip(),
Birthstate = col_skip(), `Date Of Birth` = col_skip(),
`First Name` = col_skip(), FranchiseId = col_skip(),
Height = col_skip(), Nationality_One = col_skip(),
Nationality_Three = col_skip(), Nationality_Two = col_skip(),
`Nick Name` = col_skip(), Retired = col_skip(),
TeamId = col_skip(), Weight = col_skip()),
trim_ws = TRUE)
##Read in the team_Data.csv
team_data <- read_delim("team_data.csv",
";", escape_double = FALSE, col_types = cols(`Conference Id` = col_skip(),
`Parent Team 1` = col_skip(), `Parent Team 2` = col_skip(),
`Parent Team 3` = col_skip(), `Parent Team 4` = col_skip(),
`Parent Team 5` = col_skip(), `Parent Team 6` = col_skip(),
`Parent Team 7` = col_skip(), `Parent Team 8` = col_skip(),
`Primary Color` = col_skip(), `Secondary Color` = col_skip(),
`Text Color` = col_skip(), `LeagueId` = col_skip(), `Name` = col_skip(), `Nickname` = col_skip(), `Division Id` = col_skip()), trim_ws = TRUE)
player_skater_career_stats_rs <- read_delim("player_skater_career_stats_rs.csv",
";", escape_double = FALSE, col_types = cols(GR = col_skip(),
GvA = col_skip(), `League Id` = col_skip(),
TkA = col_skip()
), trim_ws = TRUE)
player_goalie_career_stats_rs <- read_delim("player_goalie_career_stats_rs.csv",
";", escape_double = FALSE, col_types = cols(GR = col_skip(),
`League Id` = col_skip()), trim_ws = TRUE)
TeamAcronym <- read_csv("TeamAcronym.csv")
player_goalie_career_stats_rs <- filter(player_goalie_career_stats_rs, Year==yearCurrent)
player_skater_career_stats_rs <- filter(player_skater_career_stats_rs, Year==yearCurrent)
#getting player name and TOI(for skaters) into the dataframe
player_skater_rs <- merge(player_skater_career_stats_rs, player_master, by="PlayerId")
player_goalie_rs <- merge(player_goalie_career_stats_rs, player_master, by="PlayerId")
#rename TeamId to merge
names(player_goalie_rs)[names(player_goalie_rs) == "Team Id"] <- "TeamId"
names(player_goalie_rs)[names(player_goalie_rs) == "Last Name"] <- "Player Name"
names(player_goalie_rs)[names(player_goalie_rs) == "T/OL"] <- "OTL"
#getting team name into goalie df
player_goalie_rs <- merge(player_goalie_rs, team_data, by="TeamId")
player_goalie_rs$LeagueId <- c(1)
player_goalie_rs$Season <- c(seasonCurrent)
player_goalie_rs$isPlayoffs <- c(0)
player_goalie_rs$SubtotalForId <- ""
player_goalie_rs$GoalieId <- ""
player_goalie_rs$PIM <- ""
player_goalie_rs$A <- ""
player_goalie_rs$PSA <- ""
player_goalie_rs$Starts <- ""
player_goalie_rs$Backups <- ""
player_goalie_rs$PSS <- ""
player_goalie_rs <- merge(player_goalie_rs, TeamAcronym, by="Abbr")
player_goalie_rs <- subset(player_goalie_rs, select = -c(TeamId.x))
names(player_goalie_rs)[names(player_goalie_rs) == "TeamId.y"] <- "TeamId"
player_goalie_rs$Min <- player_goalie_rs$Min/60
#rearrange columns for correct output
player_goalie_rs <- player_goalie_rs[c("PlayerId", "GoalieId", "Player Name", "LeagueId", "TeamId", "SubtotalForId", "Season", "isPlayoffs"
,"GP", "W", "L","OTL", "Min", "PIM", "SO", "GA", "SA","A","ENG", "PSA", "Starts", "Backups", "PSS"
)]
names(player_skater_rs)[names(player_skater_rs) == "Team Id"] <- "TeamId"
player_skater_rs <- merge(player_skater_rs, team_data, by="TeamId")
player_skater_rs <- subset(player_skater_rs, select = -c(TeamId))
names(player_skater_rs)[names(player_skater_rs) == "Team"] <- "Abbr"
player_skater_rs <- merge(player_skater_rs, TeamAcronym, by="Abbr")
names(player_skater_rs)[names(player_skater_rs) == "FO W"] <- "FOW"
names(player_skater_rs)[names(player_skater_rs) == "Last Name"] <- "Name"
player_skater_rs$LeagueId <- c(1)
player_skater_rs$Season <- c(seasonCurrent)
player_skater_rs$isPlayoffs <- c(0)
player_skater_rs$SkaterId <- ""
player_skater_rs$SubtotalForId <- ""
player_skater_rs$PenaltyMajors <- ""
player_skater_rs$HitsTaken <- ""
player_skater_rs$OwnShotsBlocked <- ""
player_skater_rs$OwnShotsMissed <- ""
player_skater_rs$PKshots <- ""
player_skater_rs$PPshots <- ""
player_skater_rs$GameTyingGoals <- ""
player_skater_rs$PPMinutes <- ""
player_skater_rs$EmptyNetGoals <- ""
player_skater_rs$HatTrickks <- ""
player_skater_rs$PenaltyShotGoals <- ""
player_skater_rs$PenaltyShotAttempts <- ""
player_skater_rs$FightsDraw <- ""
player_skater_rs <- merge(player_skater_rs, TeamAcronym, by="Abbr")
player_skater_rs <- subset(player_skater_rs, select = -c(TeamId.x))
names(player_skater_rs)[names(player_skater_rs) == "TeamId.y"] <- "TeamId"
names(player_skater_rs)[names(player_skater_rs) == "PP G"] <- "PPG"
names(player_skater_rs)[names(player_skater_rs) == "PP A"] <- "PPA"
names(player_skater_rs)[names(player_skater_rs) == "SH G"] <- "SHG"
names(player_skater_rs)[names(player_skater_rs) == "SH A"] <- "SHA"
player_skater_rs$PPP <- player_skater_rs$PPG + player_skater_rs$PPA
player_skater_rs$SHP <- player_skater_rs$SHG + player_skater_rs$SHA
names(player_skater_rs)[names(player_skater_rs) == "Fights Won"] <- "FightsWon"
player_skater_rs$FightsLost <- player_skater_rs$Fights - player_skater_rs$FightsWon
player_skater_rs$P <- player_skater_rs$G + player_skater_rs$A
######################################
#Getting the TOI for all situations
player_skater_rs$MP <- player_skater_rs$TOI/60 + player_skater_rs$PPTOI/60 + player_skater_rs$SHTOI/60
player_skater_rs$PPMinutes  <- player_skater_rs$PPTOI/60
player_skater_rs$PkMinutes  <- player_skater_rs$SHTOI/60
player_skater_rs <- player_skater_rs[c("PlayerId", "SkaterId", "Name", "LeagueId", "TeamId", "SubtotalForId", "Season", "isPlayoffs", "GP", "G", "A", "P", "+/-", "PIM", "PenaltyMajors",
"HIT", "HitsTaken", "SOG", "OwnShotsBlocked", "OwnShotsMissed", "SB", "MP", "PPG", "PPA", "PPP", "PPshots", "PPMinutes","SHG", "SHA", "SHP" ,"PKshots", "PkMinutes",
"GWG", "GameTyingGoals", "FO", "EmptyNetGoals", "HatTrickks", "PenaltyShotGoals", "PenaltyShotAttempts", "FightsWon", "FightsLost",  "FightsDraw", "FOW")]
player_skater_career_stats_po <- read_delim("player_skater_career_stats_po.csv",
";", escape_double = FALSE, col_types = cols(GR = col_skip(),
GvA = col_skip(), `League Id` = col_skip(),
TkA = col_skip()
), trim_ws = TRUE)
player_goalie_career_stats_po <- read_delim("player_goalie_career_stats_po.csv",
";", escape_double = FALSE, col_types = cols(GR = col_skip(),
`League Id` = col_skip()), trim_ws = TRUE)
player_goalie_po <- filter(player_goalie_career_stats_po, Year==yearCurrent)
player_skater_po <- filter(player_skater_career_stats_po, Year==yearCurrent)
player_goalie_po <- merge(player_goalie_po, player_master, by="PlayerId")
player_skater_po <- merge(player_skater_po, player_master, by="PlayerId")
#rename TeamId to merge
names(player_goalie_po)[names(player_goalie_po) == "Team Id"] <- "TeamId"
names(player_goalie_po)[names(player_goalie_po) == "Last Name"] <- "Player Name"
names(player_goalie_po)[names(player_goalie_po) == "T/OL"] <- "OTL"
#getting team name into goalie df
player_goalie_po <- merge(player_goalie_po, team_data, by="TeamId")
player_goalie_po$LeagueId <- c(1)
player_goalie_po$Season <- c(seasonCurrent)
player_goalie_po$isPlayoffs <- c(1)
player_goalie_po$SubtotalForId <- ""
player_goalie_po$GoalieId <- ""
player_goalie_po$PIM <- ""
player_goalie_po$A <- ""
player_goalie_po$PSA <- ""
player_goalie_po$Starts <- ""
player_goalie_po$Backups <- ""
player_goalie_po$PSS <- ""
player_goalie_po <- merge(player_goalie_po, TeamAcronym, by="Abbr")
player_goalie_po <- subset(player_goalie_po, select = -c(TeamId.x))
names(player_goalie_po)[names(player_goalie_po) == "TeamId.y"] <- "TeamId"
player_goalie_po$Min <- player_goalie_po$Min/60
#rearrange columns for correct output
player_goalie_po <- player_goalie_po[c("PlayerId", "GoalieId", "Player Name", "LeagueId", "TeamId", "SubtotalForId", "Season", "isPlayoffs"
,"GP", "W", "L","OTL", "Min", "PIM", "SO", "GA", "SA","A","ENG", "PSA", "Starts", "Backups", "PSS"
)]
names(player_skater_po)[names(player_skater_po) == "Team Id"] <- "TeamId"
player_skater_po <- merge(player_skater_po, team_data, by="TeamId")
player_skater_po <- subset(player_skater_po, select = -c(TeamId))
names(player_skater_po)[names(player_skater_po) == "Team"] <- "Abbr"
player_skater_po <- merge(player_skater_po, TeamAcronym, by="Abbr")
names(player_skater_po)[names(player_skater_po) == "Last Name"] <- "Name"
names(player_skater_po)[names(player_skater_po) == "FO W"] <- "FOW"
names(player_skater_po)[names(player_skater_po) == "Last Name"] <- "Name"
player_skater_po$LeagueId <- c(1)
player_skater_po$Season <- c(seasonCurrent)
player_skater_po$isPlayoffs <- c(1)
player_skater_po$SkaterId <- ""
player_skater_po$SubtotalForId <- ""
player_skater_po$PenaltyMajors <- ""
player_skater_po$HitsTaken <- ""
player_skater_po$OwnShotsBlocked <- ""
player_skater_po$OwnShotsMissed <- ""
player_skater_po$PKshots <- ""
player_skater_po$PPshots <- ""
player_skater_po$GameTyingGoals <- ""
player_skater_po$PPMinutes <- ""
player_skater_po$EmptyNetGoals <- ""
player_skater_po$HatTrickks <- ""
player_skater_po$PenaltyShotGoals <- ""
player_skater_po$PenaltyShotAttempts <- ""
player_skater_po$FightsDraw <- ""
names(player_skater_po)[names(player_skater_po) == "PP G"] <- "PPG"
names(player_skater_po)[names(player_skater_po) == "PP A"] <- "PPA"
names(player_skater_po)[names(player_skater_po) == "SH G"] <- "SHG"
names(player_skater_po)[names(player_skater_po) == "SH A"] <- "SHA"
player_skater_po$PPP <- player_skater_po$PPG + player_skater_po$PPA
player_skater_po$SHP <- player_skater_po$SHG + player_skater_po$SHA
names(player_skater_po)[names(player_skater_po) == "Fights Won"] <- "FightsWon"
player_skater_po$FightsLost <- player_skater_po$Fights - player_skater_po$FightsWon
player_skater_po$P <- player_skater_po$G + player_skater_po$A
######################################
#Getting the TOI for all situations
player_skater_po$MP <- player_skater_po$TOI/60 + player_skater_po$PPTOI/60 + player_skater_po$SHTOI/60
player_skater_po$PPMinutes  <- player_skater_po$PPTOI/60
player_skater_po$PkMinutes  <- player_skater_po$SHTOI/60
player_skater_po <- player_skater_po[c("PlayerId", "SkaterId", "Name", "LeagueId", "TeamId", "SubtotalForId", "Season", "isPlayoffs", "GP", "G", "A", "P", "+/-", "PIM", "PenaltyMajors",
"HIT", "HitsTaken", "SOG", "OwnShotsBlocked", "OwnShotsMissed", "SB", "MP", "PPG", "PPA", "PPP", "PPshots", "PPMinutes","SHG", "SHA", "SHP" ,"PKshots", "PkMinutes",
"GWG", "GameTyingGoals", "FO", "EmptyNetGoals", "HatTrickks", "PenaltyShotGoals", "PenaltyShotAttempts", "FightsWon", "FightsLost",  "FightsDraw", "FOW")]
SkatersCombined <- rbind(player_skater_rs, player_skater_po)
GoaliesCombined <- rbind(player_goalie_rs, player_goalie_po)
write.csv(SkatersCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S58Skaters.csv")
write.csv(GoaliesCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S58goalie.csv")
write.csv(SkatersCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S59Skaters.csv")
write.csv(GoaliesCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S59goalie.csv")
