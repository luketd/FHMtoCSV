test <- 8448518
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Anthony Aquino"){
test <- 8469541
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Chris Higgins"){
test <- 8470274
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Michael Erickson"){
test <- 8470051
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Ryan Jones"){
test <- 8471323
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Jason Smith"){
test <- 8470789
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Mike Brown"){
test <- 8471371
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Joe Cooper"){
test <- 8471431
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "David Macdonald"){
test <- 8462245
AllNHLDrafts$PlayerID[y] <- test
} else {
#see if prospectID is blank, if so then get the playerID and position from their name.
if (is.na(player) == TRUE) {
#try catch, if the player name is not found, then assume they never played in the NHL, so they don't matter
catch1 <- tryCatch(
{
playerName <- AllNHLDrafts[y,3]
playerID_No_ProspectID <- nhl_players(playerName) %>%
select(id)
position_No_ProspectID <- nhl_players(playerName) %>%
select(primaryPosition.code)
},
error=function(cond) {
test <- 0
position <- "NA"
},
finally={
#Change LW, RW, and Center to just Forward and then log them in
if (position_No_ProspectID == "L" || position_No_ProspectID == "R" || position_No_ProspectID == "C"){
position_No_ProspectID <- "F"
}
AllNHLDrafts$PlayerID[y] <- playerID_No_ProspectID
AllNHLDrafts$Posistion[y] <- position_No_ProspectID
}
)
#Else: we have their prospectID, so we can get the position and ID from their page
}else {
player <- paste("https://statsapi.web.nhl.com/api/v1/draft/prospects/",player, sep = "")
player <- nhlapi:::nhl_from_json(player)
position <- player[["prospects"]][["primaryPosition.code"]]
id <- player[["prospects"]][["nhlPlayerId"]]
print(id)
if (is.null(id) == TRUE)
{
playerName <- AllNHLDrafts[y,3]
id <- nhl_players(playerName) %>%
select(id)
position <- nhl_players(playerName) %>%
select(primaryPosition.code)
print(id)
}
########Sometimes ProspectID doesnt return player ID because ?????
#Change LW, RW, and Center to just Forward and then log them in
if (position == "R" || position == "L" || position == "C"){
position <- "F"
}
AllNHLDrafts$PlayerID[y] <- id
AllNHLDrafts$Posistion[y] <- position
}
}
}
write.csv(AllNHLDrafts,"C:\\Users\\Luke\\Desktop\\NHLDraftID.csv", row.names = FALSE)
dfwrite2 <- apply(AllNHLDrafts,2, as.character)
write.csv(dfwrite2,"C:\\Users\\Luke\\Desktop\\NHLDraftID.csv", row.names = FALSE)
vv <- nhl_players("Matt Martin")
vv <- nhlapi::nhl_players("Matt Martin")
View(vv)
library(nhlapi)
library(dplyr)
library(jsonlite)
library(stringr)
library(lubridate)
library(tidyverse)
v <- vv %>%
filter(vv$birthDate >= '1987-01-01' && vv$birthDate <= '1991-12-31' )
View(v)
vv <- nhlapi::nhl_players("Matt Martin")
v <- vv %>%
filter(vv$birthDate <= '1987-01-01' && vv$birthDate >= '1991-12-31' )
View(v)
vv <- nhlapi::nhl_players("Matt Martin")
v <- vv %>%
filter(vv$birthDate.between('1987-01-01','1991-01-01') )
vv <- nhlapi::nhl_players("Matt Martin")
nhl_draft_prospects(35631)
x <- nhl_draft_prospects(35631)
View(x)
list2 <- list()
#Getting relevant information from the draft API for the drafts 2000-2015
#Get Draft Year, Teamname,PlayerName, Round,OV, prospectID
for (x in 2000:2015) {
draftlink <- nhlapi:::nhl_url_drafts(x)
drafts <- nhlapi:::nhl_from_json(draftlink)
list1 <- list()
for (i in 1:7){
draftsCleaned <- data.frame( Draftyear = drafts[["drafts"]][["draftYear"]],
TeamName = drafts[["drafts"]][["rounds"]][[1]][["picks"]][[i]][["team.name"]],
PlayerName = drafts[["drafts"]][["rounds"]][[1]][["picks"]][[i]][["prospect.fullName"]],
Round = drafts[["drafts"]][["rounds"]][[1]][["picks"]][[i]][["round"]],
OV = drafts[["drafts"]][["rounds"]][[1]][["picks"]][[i]][["pickOverall"]],
ProspectID = drafts[["drafts"]][["rounds"]][[1]][["picks"]][[i]][["prospect.id"]])
list1[[i]] <- draftsCleaned
}
NHLDrafts <- do.call(rbind, list1)
list2[[x]] <- NHLDrafts
}
AllNHLDrafts <- do.call(rbind, list2)
#get playerID and Position from the prospectID
AllNHLDrafts$PlayerID <- ""
AllNHLDrafts$Posistion <- ""
for (y in 1: length(AllNHLDrafts$Draftyear)) {
#print(y)
player <- AllNHLDrafts[y,6]
#some fixes because NHLAPI is dumb and doesn't have prospectID for some players
#And I am dumb for fixing them like this
if (AllNHLDrafts[y,3] == "Brian Lee") {
test <- 8471683
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Erik Johnson"){
test <- 8473446
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Kevin Koopman"){
test <- 8473570
AllNHLDrafts$PlayerID[y] <- test
}else if (AllNHLDrafts[y,3] == "Justin Taylor"){
test <- 8471525
AllNHLDrafts$PlayerID[y] <- test
}else if (AllNHLDrafts[y,3] == "Matt  Martin"){
test <- 8474709
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Sean Collins"){
test <- 8473913
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Joey Martin"){
test <- 8468673
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Craig Anderson"){
test <- 8467950
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Neil Komadoski"){
test <- 8448518
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Anthony Aquino"){
test <- 8469541
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Chris Higgins"){
test <- 8470274
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Michael Erickson"){
test <- 8470051
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Ryan Jones"){
test <- 8471323
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Jason Smith"){
test <- 8470789
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Mike Brown"){
test <- 8471371
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Joe Cooper"){
test <- 8471431
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "David Macdonald"){
test <- 8462245
AllNHLDrafts$PlayerID[y] <- test
} else {
#see if prospectID is blank, if so then get the playerID and position from their name.
if (is.na(player) == TRUE) {
#try catch, if the player name is not found, then assume they never played in the NHL, so they don't matter
catch1 <- tryCatch(
{
playerName <- AllNHLDrafts[y,3]
playerID_No_ProspectID <- nhl_players(playerName) %>%
select(id)
position_No_ProspectID <- nhl_players(playerName) %>%
select(primaryPosition.code)
},
error=function(cond) {
test <- 0
position <- "NA"
},
finally={
#Change LW, RW, and Center to just Forward and then log them in
if (position_No_ProspectID == "L" || position_No_ProspectID == "R" || position_No_ProspectID == "C"){
position_No_ProspectID <- "F"
}
AllNHLDrafts$PlayerID[y] <- playerID_No_ProspectID
AllNHLDrafts$Posistion[y] <- position_No_ProspectID
}
)
#Else: we have their prospectID, so we can get the position and ID from their page
}else {
#player <- paste("https://statsapi.web.nhl.com/api/v1/draft/prospects/",player, sep = "")
#player <- nhlapi:::nhl_from_json(player)
#position <- player[["prospects"]][["primaryPosition.code"]]
#id <- player[["prospects"]][["nhlPlayerId"]]
#print(id)
position <- nhl_draft_prospects(player) %>%
select(primaryPosition.code)
id <- nhl_draft_prospects(player) %>%
select(nhlPlayerId)
if (is.null(id) == TRUE)
{
playerName <- AllNHLDrafts[y,3]
id <- nhl_players(playerName) %>%
select(id)
position <- nhl_players(playerName) %>%
select(primaryPosition.code)
print(id)
}
########Sometimes ProspectID doesnt return player ID because ?????
#Change LW, RW, and Center to just Forward and then log them in
if (position == "R" || position == "L" || position == "C"){
position <- "F"
}
AllNHLDrafts$PlayerID[y] <- id
AllNHLDrafts$Posistion[y] <- position
}
}
}
x <- nhl_draft_prospects(35631) %>%
select(nhlPlayerId)
View(x)
for (y in 1: length(AllNHLDrafts$Draftyear)) {
print(y)
player <- AllNHLDrafts[y,6]
#some fixes because NHLAPI is dumb and doesn't have prospectID for some players
#And I am dumb for fixing them like this
if (AllNHLDrafts[y,3] == "Brian Lee") {
test <- 8471683
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Erik Johnson"){
test <- 8473446
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Kevin Koopman"){
test <- 8473570
AllNHLDrafts$PlayerID[y] <- test
}else if (AllNHLDrafts[y,3] == "Justin Taylor"){
test <- 8471525
AllNHLDrafts$PlayerID[y] <- test
}else if (AllNHLDrafts[y,3] == "Matt  Martin"){
test <- 8474709
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Sean Collins"){
test <- 8473913
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Joey Martin"){
test <- 8468673
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Craig Anderson"){
test <- 8467950
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Neil Komadoski"){
test <- 8448518
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Anthony Aquino"){
test <- 8469541
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Chris Higgins"){
test <- 8470274
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Michael Erickson"){
test <- 8470051
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Ryan Jones"){
test <- 8471323
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Jason Smith"){
test <- 8470789
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Mike Brown"){
test <- 8471371
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "Joe Cooper"){
test <- 8471431
AllNHLDrafts$PlayerID[y] <- test
} else if (AllNHLDrafts[y,3] == "David Macdonald"){
test <- 8462245
AllNHLDrafts$PlayerID[y] <- test
} else {
#see if prospectID is blank, if so then get the playerID and position from their name.
if (is.na(player) == TRUE) {
#try catch, if the player name is not found, then assume they never played in the NHL, so they don't matter
catch1 <- tryCatch(
{
playerName <- AllNHLDrafts[y,3]
playerID_No_ProspectID <- nhl_players(playerName) %>%
select(id)
position_No_ProspectID <- nhl_players(playerName) %>%
select(primaryPosition.code)
},
error=function(cond) {
test <- 0
position <- "NA"
},
finally={
#Change LW, RW, and Center to just Forward and then log them in
if (position_No_ProspectID == "L" || position_No_ProspectID == "R" || position_No_ProspectID == "C"){
position_No_ProspectID <- "F"
}
AllNHLDrafts$PlayerID[y] <- playerID_No_ProspectID
AllNHLDrafts$Posistion[y] <- position_No_ProspectID
}
)
#Else: we have their prospectID, so we can get the position and ID from their page
}else {
#player <- paste("https://statsapi.web.nhl.com/api/v1/draft/prospects/",player, sep = "")
#player <- nhlapi:::nhl_from_json(player)
#position <- player[["prospects"]][["primaryPosition.code"]]
#id <- player[["prospects"]][["nhlPlayerId"]]
#print(id)
position <- nhl_draft_prospects(player) %>%
select(primaryPosition.code)
id <- nhl_draft_prospects(player) %>%
select(nhlPlayerId)
if (is.null(id) == TRUE)
{
playerName <- AllNHLDrafts[y,3]
id <- nhl_players(playerName) %>%
select(id)
position <- nhl_players(playerName) %>%
select(primaryPosition.code)
print(id)
}
########Sometimes ProspectID doesnt return player ID because ?????
#Change LW, RW, and Center to just Forward and then log them in
if (position == "R" || position == "L" || position == "C"){
position <- "F"
}
AllNHLDrafts$PlayerID[y] <- id
AllNHLDrafts$Posistion[y] <- position
}
}
}
x <- nhl_draft_prospects(32199)
View(x)
library (rsconnect)
library(tidyverse)
library(rvest)
library(rtweet)
library(dplyr)
library(purrr)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "qiuhpw6xWBxLvhkbqlofyoN4m"
api_secret_key <- "hOE5NGbaU3uSStw7o08eaPjeaR4iZ4MKzMLiLDrX2SjsswnosK"
access_token <- "3270729511-UngtR9d7pPPNGWq6ZietCiZ1DminaRpxEsHuPIc"
access_token_secret <- "qlUU8WbSswh0IrFYDhO888iJGZGmU291WH6USb5pifDAW"
## authenticate via web browser
token <- create_token(
app = "rstatsjournalismresearch",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
#End date(Sunday date + 1 day)
endDate <- as.POSIXct("2022-01-17  5:00:00")
#Thread link
threadLink <- "https://simulationhockey.com/showthread.php?tid=112765"
threadLinkG <- paste(threadLink,"&page=%f", sep="")
getLast <- threadLink %>%
read_html() %>%
html_node(".pagination_last") %>%
html_text()
Pages <- as.integer(getLast)
#endDate <- as.Date(endDate)
pastDate <- endDate - 622800
getlist <- function(x) {
#x <- 2
website <- sprintf(threadLinkG,x)
url <- read_html(website)
#website
if(x==1){
userName <- url %>%
html_nodes("style~ .classic .profile-username a") %>%
html_text()
} else {
userName <- url %>%
html_nodes(".profile-username a") %>%
html_text()
}
profile <- url %>%
html_nodes(".post_body > .mycode_url") %>%
html_text()
profile <- tolower(c(profile))
#print(profile)
getProfile <- profile %>% as.data.frame() %>%
separate(1, into = c("handle", "extra"), sep = "[?]")
getProfile$handle <- gsub("https://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("http://www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("www.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("https://mobile.twitter.com/", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/with_replies", replacement = "", x = getProfile$handle)
getProfile$handle <- gsub("/", replacement = "", x = getProfile$handle)
#print(getProfile)
payment <- vector(mode ="integer", length=1)
payInc <-1
for (value in getProfile$handle){
print(value)
getuser <- rtweet::get_timeline(value, n = 150, check=FALSE, fast=TRUE)
filtered <- getuser %>%
select(created_at, screen_name,hashtags, text ,replyToSN = reply_to_status_id) %>%
filter(created_at >= pastDate & created_at <= endDate & grepl("shlhockey", tolower(hashtags)) == TRUE)
filtered$created_at <- filtered$created_at - 18000
twitter_name <- filtered$screen_name[1]
#print(twitter_name)
if (dim(filtered)[1] == 0) {
payment[payInc] <- 0
payInc <- payInc +1
}else {
filtered$created_at <- as.Date(filtered$created_at, format="%y-%mm-%dd")
filtered["Payout"] <- 0
replyDate <- vector(mode = "character", length =1)
tweetDate <- vector(mode = "character", length =1)
reply <- 1
tweet <- 1
for (i in 1:length(filtered$created_at)){
#Check to see if it is a reply
if(is.na(filtered$replyToSN[i]) == TRUE) {
if (length(tweetDate) == 3) {
#checking if there is already 3 tweets claimed
filtered$Payout[i] <- 0
}else if (tweetDate[1]==""){
#gsub removes emoji characters
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
} else if (is.na(match(filtered$created_at[i], tweetDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
tweetDate[tweet] <- filtered$created_at[i]
tweet <- tweet +1
filtered$Payout[i] <- 150000
}
#else, checks if it is a reply, if so enter the if statement
} else if (is.na(filtered$replyToSN[i]) == FALSE) {
if (length(replyDate) == 3){
filtered$Payout[i] <- 0
#if there already are 3 replies that gets paid, then give that payout as 0
}else if (replyDate[1]==""){
#gsub removes emoji characters
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
} else if (is.na(match(filtered$created_at[i], replyDate)) == FALSE) {
#if date was already used
filtered$Payout[i] <- 0
} else {
replyDate[reply] <- filtered$created_at[i]
reply <- reply +1
filtered$Payout[i] <- 50000
}
}
}
#gives the summation of the payout
temp <- filtered %>%
dplyr::group_by(screen_name) %>%
dplyr::summarize(Payout = as.double(format(sum(Payout), .groups = 'drop', scientific=F)))
payment[payInc] <- temp$Payout
payInc <- payInc +1
}
}
data.frame(userName,getProfile$handle, payment)
}
if (Pages == 1){
SHL <- purrr::map_df(1, getlist)
} else {
SHL <- purrr::map_df(1:Pages, getlist)
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
}
duplicateOccur <- data.frame(table(SHL$getProfile.handle))
duplicateOccur[duplicateOccur$Freq > 1,]
UserOccur <- data.frame(table(SHL$userName))
UserOccur[UserOccur$Freq > 1,]
write.csv(SHL,"C:\\Users\\Luke\\Desktop\\SHL\\Twitter\\Twitter01-17-22.csv", row.names = FALSE)
library(tidyverse)
library(dplyr)
library(readr)
seasonCurrent <- 61
yearCurrent <- 2027
source('~/FHMtoBojo/FHMtoCSV/FHMtoBojo/FHMtoBojo.R', echo=TRUE)
setwd("~/FHMtoBojo/FHMtoCSV/FHMtoBojo")
source('~/FHMtoBojo/FHMtoCSV/FHMtoBojo/FHMtoBojo.R', echo=TRUE)
View(SkatersCombined)
View(player_skater_career_stats_rs)
View(player_skater_rs)
View(player_master)
View(player_skater_career_stats_rs)
source('~/FHMtoBojo/FHMtoCSV/FHMtoBojo/FHMtoBojo.R', echo=TRUE)
write.csv(SkatersCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S61Skaters.csv")
write.csv(GoaliesCombined,"C:\\Users\\Luke\\Desktop\\SHL\\S61goalie.csv")
